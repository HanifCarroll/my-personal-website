---
import { getEntry } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import { Image } from 'astro:assets';

const galleryEntry = await getEntry('gallery', 'gallery');
const galleryImages = galleryEntry.data.images;
const title = 'Photo Gallery';
const description = "A collection of photos I've taken over the years.";
---

<BaseLayout title={title} description={description}>
	<div class='container'>
		<div class='mb-10'>
			<h1 class='text-3xl font-bold mb-2'>All Posts</h1>
			<p class='text-zinc-700 dark:text-zinc-300 text-lg'>{description}</p>
		</div>
		<div class='gallery-grid'>
			{
				galleryImages.map((image, index) => (
					<div class='gallery-item rounded-lg'>
						<Image
							class='object-cover w-full h-64 rounded-lg cursor-pointer'
							src={image.image}
							alt={image.alt}
							width={300}
							height={300}
							quality={80}
							format='webp'
							data-index={index}
							data-full-size-src={image.image.src}
						/>
					</div>
				))
			}
		</div>
		<div class='image-modal hidden fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50'>
			<button class='close-button absolute top-4 right-4 text-white text-2xl'>&times;</button>
			<button class='prev-button absolute left-4 top-1/2 transform -translate-y-1/2 text-white text-4xl'>&larr;</button>
			<button class='next-button absolute right-4 top-1/2 transform -translate-y-1/2 text-white text-4xl'>&rarr;</button>
			<img src='' alt='' class='max-w-[90vw] max-h-[90vh] w-auto h-auto object-contain' loading='lazy' />
		</div>
	</div>
</BaseLayout>

<style>
	.gallery-grid {
		display: grid;
		grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
		gap: 1rem;
	}
	.gallery-item {
		border: 1px solid #ccc;
		padding: 1rem;
	}
	.gallery-item img {
		width: 100%;
		height: auto;
	}
	@media (max-width: 640px) {
		.gallery-grid {
			grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
		}
	}

	.image-modal {
		transition: opacity 0.3s ease-in-out;
	}
	.image-modal.hidden {
		opacity: 0;
		pointer-events: none;
	}
	.close-button,
	.prev-button,
	.next-button {
		background: none;
		border: none;
		cursor: pointer;
		outline: none;
	}
</style>

<script>
	const galleryItems = document.querySelectorAll('.gallery-item img');
	const modal = document.querySelector('.image-modal');
	const modalImage = modal!.querySelector('img');
	const closeButton = modal!.querySelector('.close-button');
	const prevButton = modal!.querySelector('.prev-button');
	const nextButton = modal!.querySelector('.next-button');

	let currentIndex = 0;

	function openModal(index: number) {
		currentIndex = index;
		updateModalImage();
		modal!.classList.remove('hidden');
		document.addEventListener('keydown', handleKeyPress);
	}

	function closeModal() {
		modal!.classList.add('hidden');
		document.removeEventListener('keydown', handleKeyPress);
	}

	function updateModalImage() {
		const currentItem = galleryItems[currentIndex] as HTMLImageElement;
		const fullSizeImageSrc = currentItem.dataset.fullSizeSrc || currentItem.src;
		modalImage!.src = fullSizeImageSrc;
		modalImage!.alt = currentItem.alt;
	}

	function navigateImage(direction: number) {
		currentIndex = (currentIndex + direction + galleryItems.length) % galleryItems.length;
		updateModalImage();
	}

	function handleKeyPress(e: KeyboardEvent) {
		if (e.key === 'ArrowLeft') navigateImage(-1);
		if (e.key === 'ArrowRight') navigateImage(1);
		if (e.key === 'Escape') closeModal();
	}

	galleryItems.forEach((item, index) => {
		item.addEventListener('click', () => openModal(index));
	});

	closeButton!.addEventListener('click', closeModal);
	prevButton!.addEventListener('click', () => navigateImage(-1));
	nextButton!.addEventListener('click', () => navigateImage(1));
</script>
